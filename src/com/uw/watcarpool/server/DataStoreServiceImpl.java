package com.uw.watcarpool.server;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import com.googlecode.objectify.Query;
import com.google.appengine.api.datastore.QueryResultIterator;
import com.google.appengine.api.users.User;
import com.google.appengine.api.users.UserService;
import com.google.appengine.api.users.UserServiceFactory;
import com.google.gwt.user.server.rpc.RemoteServiceServlet;
import com.googlecode.objectify.Objectify;
import com.googlecode.objectify.ObjectifyService;
import com.uw.watcarpool.client.DataStoreService;
import com.uw.watcarpool.client.Driver;
import com.uw.watcarpool.client.Passenger;
import com.uw.watcarpool.shared.ClientUtilities;

@SuppressWarnings("serial")
public class DataStoreServiceImpl extends RemoteServiceServlet implements
		DataStoreService {
	UserService userService = UserServiceFactory.getUserService();
    User user = userService.getCurrentUser();
	static{
	    ObjectifyService.register(Passenger.class);
	    ObjectifyService.register(Driver.class);
		}
	
	@SuppressWarnings("unchecked")
	public List<Driver> checkDrivers(String kind, String name, String contact, Date date, String pickupLoc, String dropoffLoc, int spots)
			throws IllegalArgumentException {
		
        Objectify ofy = ObjectifyService.begin();
        List<Driver> ret = new ArrayList<Driver>();
		
        //First level filters
        Query<Driver> q = ofy.query(Driver.class).filter("_spots >=", spots).filter("_dropoffLoc", dropoffLoc);
		QueryResultIterator<Driver> iterator = q.iterator();

		//Second level filters	
		while (iterator.hasNext()) {
	        Driver d = iterator.next();
	        if (d._date.after(date) || d._date.equals(date))
	        {
	         ret.add(d);
	        }

		}
        
		//Return the filtered results to the client
	    if (ret.size()!=0)
	    {
	    	//Sort the output list according to date.
	    	Collections.sort(ret, new Comparator(){ 
	    		public int compare(Object d1, Object d2){    		       
	    	        Date d1Date = ((Driver)d1)._date;        
	    	        Date d2Date = ((Driver)d2)._date;	    	       
	    	        if(d1Date.after(d2Date))
	    	            return 1;
	    	        else if(d1Date.before(d2Date))
	    	            return -1;
	    	        else
	    	            return 0;    
	    	    }
	    	});
	    	
	    	return ret;
	    	
	    }
	    else //Create a new entry in the database 
	    {
	    	
	    	Passenger passenger = new Passenger(contact, date, pickupLoc, dropoffLoc, spots, user.getEmail());
	    	assert passenger.id != null;    // id was autogenerated
	    	ofy.put(passenger);
	    	
	    	return null;
	    	
	    }
		    
	}
	

	public List<Passenger> checkPassengers(String kind, String name, String contact, Date date, String pickupLoc, String dropoffLoc, int spots)
		{

		Objectify ofy = ObjectifyService.begin();
        List<Passenger> ret = new ArrayList<Passenger>();
		
        //First level filters
        Query<Passenger> q = ofy.query(Passenger.class).filter("_spots <=", spots).filter("_dropoffLoc", dropoffLoc);
		QueryResultIterator<Passenger> iterator = q.iterator();

		//Second level filters	
		while (iterator.hasNext()) {
	        Passenger p = iterator.next();
	        if (p._date.before(date) || p._date.equals(date))
	        {
	         ret.add(p);
	        }

		}
        
		//Return the filtered results to the client
	    if (ret.size()!=0)
	    {
	    	return ret;
	    	
	    }
	    else
	    {
	    	Driver driver = new Driver(contact, date, pickupLoc, dropoffLoc, spots, user.getEmail());
	    	assert driver.id != null;    // id was autogenerated
	    	ofy.put(driver);
	    	return null;
	    	
	    }
	}

	 
	
}
