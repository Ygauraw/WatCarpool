package com.uw.watcarpool.server;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import com.googlecode.objectify.Query;
import com.google.appengine.api.datastore.QueryResultIterator;
import com.google.appengine.api.users.User;
import com.google.appengine.api.users.UserService;
import com.google.appengine.api.users.UserServiceFactory;
import com.google.gwt.user.server.rpc.RemoteServiceServlet;
import com.googlecode.objectify.Objectify;
import com.googlecode.objectify.ObjectifyService;
import com.uw.watcarpool.client.Booking;
import com.uw.watcarpool.client.DataStoreService;
import com.uw.watcarpool.client.Deal;
import com.uw.watcarpool.client.Driver;
import com.uw.watcarpool.client.Match;
import com.uw.watcarpool.client.Passenger;


@SuppressWarnings("serial")
public class DataStoreServiceImpl extends RemoteServiceServlet implements
		DataStoreService {

	static{
		ObjectifyService.register(Match.class);
	    ObjectifyService.register(Passenger.class);
	    ObjectifyService.register(Driver.class);
	    ObjectifyService.register(Deal.class);
		}
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public List<Driver> checkDrivers(String kind, String name, String contact, Date date, String pickupLoc, String dropoffLoc, int spots) throws IllegalArgumentException {
		UserService userService = UserServiceFactory.getUserService();
	    User user = userService.getCurrentUser();
        Objectify ofy = ObjectifyService.begin();
        List<Driver> ret = new ArrayList<Driver>();
		
        // First level filters
        Query<Driver> q = ofy.query(Driver.class).filter("_spots >=", spots).filter("_dropoffLoc", dropoffLoc.toUpperCase().trim());
		QueryResultIterator<Driver> iterator = q.iterator();

		// Second level filters	
		while (iterator.hasNext()) {
	        Driver d = iterator.next();
	        if (d._date.after(date) || d._date.equals(date))
	        {
	         ret.add(d);
	        }

		}
        
		// Insert into the corresponding database first

    	Passenger passenger = new Passenger(contact, date, pickupLoc.toUpperCase(), dropoffLoc.toUpperCase(), spots, user.getEmail().toLowerCase());
    	assert passenger._UUID != null;    // id was autogenerated
    	ofy.put(passenger);
		
		// Return the filtered results to the client
	    if (ret.size()!=0)
	    {
	    	// Sort the output list according to date.
	    	Collections.sort(ret, new Comparator(){ 
	    		public int compare(Object d1, Object d2){    		       
	    	        Date d1Date = ((Driver)d1)._date;        
	    	        Date d2Date = ((Driver)d2)._date;	    	       
	    	        if(d1Date.after(d2Date))
	    	            return 1;
	    	        else if(d1Date.before(d2Date))
	    	            return -1;
	    	        else
	    	            return 0;    
	    	    }
	    	});
	    	

	    	return ret;
	    	
	    }
	    else // Create a new entry in the database 
	    {
	    	return null;
	    	
	    }
		    
	}
	

	public List<Passenger> checkPassengers(String kind, String name, String contact, Date date, String pickupLoc, String dropoffLoc, int spots)
		{
		UserService userService = UserServiceFactory.getUserService();
	    User user = userService.getCurrentUser();
		Objectify ofy = ObjectifyService.begin();
        List<Passenger> ret = new ArrayList<Passenger>();
		 
        // First level filters
        Query<Passenger> q = ofy.query(Passenger.class).filter("_spots <=", spots).filter("_dropoffLoc", dropoffLoc.toUpperCase().trim());
		QueryResultIterator<Passenger> iterator = q.iterator();

		// Second level filters	
		while (iterator.hasNext()) {
	        Passenger p = iterator.next();
	        if (p._date.before(date) || p._date.equals(date))
	        {
	         ret.add(p);
	        }

		}
        // Insert into the corresponding database first
		Driver driver = new Driver(contact, date, pickupLoc.toUpperCase(), dropoffLoc.toUpperCase(), spots, user.getEmail().toLowerCase());
    	assert driver._UUID != null;    // id was autogenerated
    	ofy.put(driver);
		// Return the filtered results to the client
	    if (ret.size()!=0)
	    {
	    	return ret;
	    	
	    }
	    else
	    { 	
	    	return ret;
	    }
	}
	
    public String updateDrivers(String dUUID, Date date, String userId, String dropoffLoc)
    {
    	
    	String ret=null;
        Objectify dofy = ObjectifyService.begin();
    	Driver d = dofy.get(Driver.class, new Long(dUUID));  
    	
    	Objectify pofy = ObjectifyService.begin();
    	Query<Passenger> q = pofy.query(Passenger.class).filter("_userId", userId).filter("_dropoffLoc", dropoffLoc);
    	QueryResultIterator<Passenger> iterator = q.iterator();
		while (iterator.hasNext()) {
	        Passenger p = iterator.next();
	        if (p._date.equals(date))
	        {
	        	//Change statuses on matched parties
	        	p._pending=true;
	        	d._pending=true;
	        	dofy.put(d);
	        	pofy.put(p);
	        	Objectify mfy = ObjectifyService.begin();
	        	Match m = new Match(d._UUID, p._UUID);
	        	assert m._UUID != null;
	        	mfy.put(m);
	        	ret=m._UUID.toString();
	        }
		}
		return ret;
		
    }
    
    public String updatePassengers(String pUUID, Date date, String userId, String dropoffLoc)
    {
    	
    	String ret=null;
        Objectify pofy = ObjectifyService.begin();
    	Passenger p = pofy.get(Passenger.class, new Long(pUUID));  
    	
    	Objectify dofy = ObjectifyService.begin();
    	Query<Driver> q = dofy.query(Driver.class).filter("_userId", userId).filter("_dropoffLoc", dropoffLoc);
    	QueryResultIterator<Driver> iterator = q.iterator();
		while (iterator.hasNext()) {
	        Driver d = iterator.next();
	        if (d._date.equals(date))
	        {
	        	//Change statuses on matched parties
	        	d._pending=true;
	        	p._pending=true;
	        	dofy.put(d);
	        	pofy.put(p);
	        	Objectify mfy = ObjectifyService.begin();
	        	Match m = new Match(d._UUID, p._UUID);
	        	assert m._UUID != null;
	        	mfy.put(m);
	        	ret=m._UUID.toString();
	        }
		}
		return ret;
		
    }
    
    public List<Booking> getBookings(String email)
	{
    	List<Booking> myBookings =new ArrayList<Booking>();
     	Objectify mfy = ObjectifyService.begin();
    	Objectify dofy = ObjectifyService.begin();
    	Objectify pofy = ObjectifyService.begin();
    	
    	Query<Match> q = mfy.query(Match.class);
    	QueryResultIterator<Match> iterator = q.iterator();
    	
    	while (iterator.hasNext()) {
    		Match m = iterator.next();
    		Driver d = dofy.get(Driver.class, m._driver);
    		Passenger p = pofy.get(Passenger.class,m._passenger);
    	    if (d._userId.equalsIgnoreCase(email) || p._userId.equalsIgnoreCase(email))
    	    {
    	    	myBookings.add(new Booking(m._UUID.toString(), d,p));
    	    }
    	}
    	return myBookings;
	
	}
    
    public String deleteBooking(String matchId)
	{
    	
     	Objectify mfy = ObjectifyService.begin();
    	Objectify dofy = ObjectifyService.begin();
    	Objectify pofy = ObjectifyService.begin();
    	Objectify deofy = ObjectifyService.begin();
    	
    	Match m = mfy.get(Match.class, new Long(matchId));
    	Driver d= dofy.get(Driver.class,m._driver);

    	Passenger p = pofy.get(Passenger.class,m._passenger);
    	// Update Available Spots
    	d._spots=d._spots-p._spots;
    	if (d._spots==0)
    	{
    	   dofy.delete(Driver.class,m._driver);
    	}
    	else
    	{
    		dofy.put(d); // Update the corresponding record
    	}
    	Deal deal = new Deal(d._date,d._contact,d._userId,p._contact,p._userId,d._dropoffLoc,d._pickupLoc);
    	assert deal._UUID != null;
    	deofy.put(deal);
    	pofy.delete(Passenger.class,m._passenger);
    	mfy.delete(Match.class,m._UUID);
    	
    	return deal._UUID.toString();
	
	}
	 
	
}
